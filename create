#!/bin/bash
LSFSUBMIT_PATH=$CMSSW_BASE/src/Tools/LSFsubmit/scripts/
configFile=$1
filelist=$2


if [ ! -r "$configFile" ];then
	echo "[ERROR `basename $0`] config file not provided or not readable" >> /dev/stderr
	exit 1
fi
source $configFile


# check inputs
if [ -e "${UI_WORKING_DIR}" ];then
   echo "[ERROR `basename $0`] UI_WORKING_DIR: $UI_WORKING_DIR already exists" >> /dev/stderr
   exit 1
fi
if [ ! -e "$pset" ];then
   echo "[ERROR `basename $0`] pset: $pset not found or not readable" >> /dev/stderr
   exit 1
fi
if [ -z "${dataset}" ];then
	echo "[ERROR `basename $0`] dataset not defined" >> /dev/stderr
	exit 1
fi

if voms-proxy-info | grep -q "timeleft  : 00:00:00" ; then
	voms-proxy-list
fi

# create the dir

mkdir -p $UI_WORKING_DIR/{share,res} || {
	echo "[ERROR `basename $0`] impossible to create $UI_WORKING_DIR/{share,res}" >> /dev/stderr
	exit 1
}
cp $configFile $UI_WORKING_DIR/share/config

# prepare the pset
python $pset $psetparams || exit 1
mv processDump.py $UI_WORKING_DIR/share/pset.py || exit 1

#make the file list
case $dataset in
	None)
		if [ ! -r "${filelist}" ];then
			echo "[ERROR `basename $0`] filelist $filelist not found or not readable" >> /dev/stderr
			exit 1
		fi
		awk -v nFileMax=10 'BEGIN{n=1};(NF!=0){i++; print n,"\""$1"\"",0,0,0,0; if(i>=nFileMax){n++; i=0}}' $filelist > $UI_WORKING_DIR/share/filelist
		;;
	*)
		if [ -n "${runrange}" -a "${runrange}" != "allRange" ]; then
			# if datasetsite is not assigned or null, it is replaced by T2_CH_CERN
			filelist $dataset ${datasetsite:=T2_CH_CERN} $runrange > $UI_WORKING_DIR/share/filelist || exit 1
		else
			filelist $dataset $datasetsite > $UI_WORKING_DIR/share/filelist || exit 1
		fi
		;;
esac
cp $LSFSUBMIT_PATH/CMSSW.sh $UI_WORKING_DIR/share/
#cp $LSFSUBMIT_PATH/copy     $UI_WORKING_DIR/share/

# make the sandbox
$LSFSUBMIT_PATH/sandbox $UI_WORKING_DIR || exit $?

# make the executable script (needed by HTCondor
cat > $UI_WORKING_DIR/share/run.sh <<EOF
#!/bin/bash

BASE_DIR=${PWD}
UI_WORKING_DIR=${UI_WORKING_DIR}

PROCESS_ID=\$1
echo "Process ID "\$PROCESS_ID

export X509_USER_PROXY=\$2
voms-proxy-info -all

echo "proxy info "\$X509_USER_PROXY

echo "\${PROCESS_ID} RUNNING" > \${BASE_DIR}/\$UI_WORKING_DIR/res/\${PROCESS_ID}.status; 
cp \${BASE_DIR}/\$UI_WORKING_DIR/share/* .; 
source ./config

#to use ecalautomation.py
source /eos/project-c/cms-ecal-calibration/ecal-venv/bin/activate
ecalautomation.py -c \${datasetname}  -w ECALELF_prod -e \${extraName} jobctrl --id \${PROCESS_ID} --running
#disable temporary ecal automation because it interferes with cmsRun
deactivate

#######################################################################
#CMSSW job
./CMSSW.sh \${PROCESS_ID} filelist $CMSSW_VERSION
EXITSTATUS=\$?; 

source /eos/project-c/cms-ecal-calibration/ecal-venv/bin/activate

if [ \$EXITSTATUS != 0 ]
then
    echo "[\`basename \$0\`] exitstatus=\$EXITSTATUS"
    ecalautomation.py -c \${datasetname}  -w ECALELF_prod -e \${extraName} jobctrl --id \${PROCESS_ID} --failed
    echo "\${PROCESS_ID} \$EXITSTATUS" >  \${BASE_DIR}/\${UI_WORKING_DIR}/res/\${PROCESS_ID}.status
    exit \$EXITSTATUS
fi
echo "======================================== ls"
ls
echo "======================================== Copy"
echo "------------------------------ configfile"
cat config

echo "------------------------------"

ID=\`uuidgen -r | cut -d '-' -f 2\`

declare -a filenames
declare -a filetypes
for file in \$outFiles *.root
do
        echo "checking "\$file 
	if [ ! -e "\${file}" ]; then continue; fi
	newFileName=\`basename \$file .root\`-\$PROCESS_ID-1-\$ID.root
	mv \$file \$newFileName
	ls
	echo "xrdcp -vsN \$newFileName \$storage_path/\${user_remote_dir} "
	if ( xrdcp -vsN \$newFileName \$storage_path/\${user_remote_dir}/\$newFileName ) then
	    simple_storage_path=\$(echo \$storage_path | sed -e 's#root://eoscms/##g')
	    filenames+=("\$simple_storage_path/\${user_remote_dir}/\$newFileName")
	    filetypes+=(\`basename \$file .root\`)
	else
	    CPEXITSTATUS=\$((60000+\$?))
            ecalautomation.py -c \${datasetname}  -w ECALELF_prod -e \${extraName} jobctrl --id \${PROCESS_ID} --failed
            echo "\${PROCESS_ID} \$CPEXITSTATUS" >  \${BASE_DIR}/\${UI_WORKING_DIR}/res/\${PROCESS_ID}.status
	    exit \$CPEXITSTATUS
	fi
done

# if I am here both cmsrun and copy run correctly
ecalautomation.py -c \${datasetname}  -w ECALELF_prod -e \${extraName} jobctrl --id \${PROCESS_ID} --done
for ifile in "\${!filenames[@]}"
do
    echo
    ecalautomation.py -c \${datasetname}  -w ECALELF_prod -e \${extraName} setfile --id \${PROCESS_ID} --path \${filenames[ifile]} --type \${filetypes[ifile]}
done

echo "\${PROCESS_ID} 0" >  \${BASE_DIR}/\${UI_WORKING_DIR}/res/\${PROCESS_ID}.status
echo "======================================== END"
EOF

#disable communication with database in case ECALAUTOMATION is OFF
if [ $ECALAUTOMATION = 0 ]
then
   sed -i "s/ecalautomation.py/#ecalautomation.py/g" ${UI_WORKING_DIR}/share/run.sh
fi
chmod +x ${UI_WORKING_DIR}/share/run.sh

exit 0
